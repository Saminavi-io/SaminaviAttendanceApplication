package com.saminavi.attendancePortal.SaminaviAttendanceApplication.controller;


import com.saminavi.attendancePortal.SaminaviAttendanceApplication.domain.Employee;
import com.saminavi.attendancePortal.SaminaviAttendanceApplication.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/auth") // Base path for authentication endpoints
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final EmployeeService employeeService;

    @Autowired
    public AuthController(AuthenticationManager authenticationManager, EmployeeService employeeService) {
        this.authenticationManager = authenticationManager;
        this.employeeService = employeeService;
    }

    @PostMapping("/login") // Handles login requests
    public ResponseEntity<String> authenticateUser(@RequestBody LoginRequest loginRequest) {
        // Authenticate the user using Spring Security's AuthenticationManager
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        // Set the authenticated user in the security context
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // You can generate a JWT token here and return it to the frontend
        // For MVP, you might just return a success message or user details

        return new ResponseEntity<>("User logged in successfully", HttpStatus.OK);
    }

    // You might add an endpoint for employee registration here for the MVP
    // @PostMapping("/register")
    // public ResponseEntity<String> registerUser(@RequestBody RegistrationRequest registrationRequest) {
    //     try {
    //         employeeService.registerEmployee(
    //                 registrationRequest.getUsername(),
    //                 registrationRequest.getPassword(),
    //                 registrationRequest.getName(),
    //                 registrationRequest.getEmployeeId()
    //         );
    //         return new ResponseEntity<>("User registered successfully", HttpStatus.CREATED);
    //     } catch (RuntimeException e) {
    //         return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
    //     }
    // }
}